<?php  namespace Library\Models;    	use \Library\Entities\Utilisateur;	  class UtilisateurManager_PDO     extends UtilisateurManager   {	    public function modify(Utilisateur $utilisateur)     {      $requete = $this->dao->prepare('UPDATE UTILISATEUR SET UTI_LOGIN = :login, UTI_MAIL = :mail WHERE UTI_ID = :id');      $requete->bindValue(':login', htmlspecialchars($utilisateur->login()));      $requete->bindValue(':mail', $utilisateur->email());      $requete->bindValue(':id', $utilisateur->id());      $requete->execute();    }    public function getUtilisateurById($id)     {      $requete = $this->dao->prepare("SELECT UTI_ID AS id, UTI_LOGIN AS login, UTI_MAIL AS email FROM UTILISATEUR WHERE UTI_ID = :id");      $requete->bindValue(':id', (int) $id, \PDO::PARAM_INT);      $requete->execute();                  if ($utilisateur = $requete->fetch(\PDO::FETCH_ASSOC))       {                        return new Utilisateur($utilisateur);      }            return null;    }          public function getUtilisateurListBySessionId($id) {      $utilisateurList = array();          $requete = $this->dao->prepare(                  "SELECT                    UTILISATEUR.UTI_ID AS id,                    UTILISATEUR.UTI_LOGIN AS login,                    UTILISATEUR.UTI_MAIL AS email                  FROM                    SESSION                    JOIN PARTICIPANT ON PARTICIPANT.SES_ID = SESSION.SES_ID                    JOIN UTILISATEUR ON UTILISATEUR.UTI_ID = PARTICIPANT.UTI_ID                  WHERE                    SESSION.SES_ID = :id                  ORDER BY                    UTILISATEUR.UTI_LOGIN");                            $requete->bindValue(':id', (int) $id);      $requete->execute();            while($utilisateur = $requete->fetch(\PDO::FETCH_ASSOC))       {				        $utilisateurList[] = new Utilisateur($utilisateur);      }            $requete->closeCursor();            return $utilisateurList;    }      }